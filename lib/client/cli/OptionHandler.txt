package lib.client.cli;

import java.io.PrintWriter;
import java.io.StringWriter;
import java.util.EnumMap;
import java.util.function.Supplier;

import org.jline.keymap.BindingReader;
import org.jline.keymap.KeyMap;
import org.jline.terminal.Terminal;
import org.jline.utils.NonBlockingReader;

import lib.client.api.APIResponse;
import lib.client.api.HotelierAPI;
import lib.client.api.Status;
import lib.share.struct.HotelDTO;

public class OptionHandler {
    // Implementing Singleton pattern
    private static OptionHandler instance = null;
    private static Terminal terminal;
    private static PrintWriter writer;
    private static EnumMap<Option, Supplier<Runnable>> optionMap;
    private static KeyMap<String> keyMap;
    private static HotelierAPI EntryPoint;

    private OptionHandler() {
        CliHandler.getInstance();
        terminal = CliHandler.terminal;
        writer = CliHandler.writer;
        optionMap = new EnumMap<>(Option.class);
        optionMap.put(Option.REGISTER, Registration::new);
        optionMap.put(Option.LOGIN, Login::new);
        optionMap.put(Option.FULL_LOGOUT, FullLogout::new);
        optionMap.put(Option.SEARCH_H, SearchHotel::new);
        keyMap = CliHandler.keyMap;
        EntryPoint = CliHandler.EntryPoint;
    }

    public static OptionHandler getInstance() {
        if (instance == null) {
            instance = new OptionHandler();
        }
        return instance;
    }

    

    public static Runnable Handler(Option option) {
        return optionMap.get(option).get();
    }

    // Delete the last character in the appropriate field
    protected static void deleteLastCharacter(StringBuilder input) {
        if(input.length() > 0) input.deleteCharAt(input.length() - 1);
    }

    // Mask the input for passwords
    protected static String maskInput(StringBuilder input) {
        StringBuilder masked = new StringBuilder();
        for (int i = 0; i < input.length(); i++) {
            masked.append("*");
        }
        return masked.toString();
    }

    // Helper method to append menu entries
    private static void appendMenuEntry(StringBuilder buff,String label, String value, boolean isHighlighted) {
        appendMenuEntry(buff,label, value, isHighlighted, false);
    }
    
    // Overloaded helper method for the Register option
    private static void appendMenuEntry(StringBuilder buff,String label, String value, boolean isHighlighted, boolean isButton) {
        // Format label and value for consistent spacing
        String formattedValue = isButton ? "" : value; // No value for register option
        String highlightStart = isHighlighted ? Ansi.HIGHLIGHT+" " : "";
        String highlightEnd = null;
        if(isButton) 
            highlightEnd = isHighlighted ?  " "+Ansi.RESET : "";
        else highlightEnd = isHighlighted ? " " +Ansi.RESET + " : " : " ";
        
        // Append the entry
        buff.append(highlightStart)
            .append(label) // Adjust this width as necessary
            .append(highlightEnd)
            .append("\t"+formattedValue);
        if(isHighlighted && !isButton) buff.append("_"); //Highlight the cursor
        buff.append("\n\n");
    }

    public static String getStackTraceAsString(Throwable throwable) {
        StringWriter stringWriter = new StringWriter();
        PrintWriter printWriter = new PrintWriter(stringWriter);
        throwable.printStackTrace(printWriter);
        return stringWriter.toString();
    }

    public static class Registration implements Runnable {
        private final Terminal terminal;
        private final BindingReader reader;
        private final PrintWriter writer;
        private final StringBuilder username;
        private final StringBuilder password;
        private final StringBuilder confirmPassword;
        private final StringBuilder menuBuffer;
        private boolean returnToMenu;
        private int index;
        private String message;

        public Registration() {
            username = new StringBuilder();
            password = new StringBuilder();
            confirmPassword = new StringBuilder();
            menuBuffer = new StringBuilder();
            CliHandler.getInstance();
            terminal = OptionHandler.terminal;
            reader = CliHandler.bindingReader;
            writer = OptionHandler.writer;
            returnToMenu = false;
            message = "";
            index = 0;
        }

        @Override
        public void run() {
            while (!returnToMenu) {
                displayRegisterMenu();
                String key = reader.readBinding(keyMap);
                if (key == null) continue;
                switch (key) {
                    case "UP": index = (index - 1 + 5) % 5; break;
                    case "DOWN": case "TAB": index = (index + 1) % 5; break;
                    case "ENTER":
                        if (index == 3) {
                            if(username.length() == 0 || password.length() == 0 || confirmPassword.length() == 0) {
                                message = Ansi.RED + "Please fill in all fields" + Ansi.RESET; break;
                            } else if(!password.toString().equals(confirmPassword.toString())) {
                                message = Ansi.RED+"Passwords do not match. Please try again"+Ansi.RESET; break;
                            }
                            APIResponse response = null;
                            try{
                                response = EntryPoint.UserRegister(username.toString(), password.toString());
                            } catch(Exception e){
                                CliHandler.TerminationMessage = Ansi.RED+"Error on login: " + e.getMessage()+Ansi.RESET;
                                System.exit(-1);
                            }

                            if(response.getStatus() == Status.OK)
                                CliHandler.LastOpMessage = Ansi.GREEN+"Registration successful!"+Ansi.RESET;
                            else
                                CliHandler.LastOpMessage = Ansi.RED+"Registration failed " + response.getMessage()+Ansi.RESET;
                
                            returnToMenu = true;
                        } else if(index == 4){
                            returnToMenu = true;
                        } break;

                    case "BACKSPACE":{
                        switch (index) {
                            case 0: deleteLastCharacter(username);break;
                            case 1:deleteLastCharacter(password);break;
                            case 2:deleteLastCharacter(confirmPassword);break;
                        }
                    } break;
                    default:
                        if (key.length() == 1) {
                            switch (index) {
                                case 0:username.append(key);break;
                                case 1:password.append(key);break;
                                case 2:confirmPassword.append(key);break;
                            }
                        }
                    break;
                }
            }
        }

        private void displayRegisterMenu() {
            // Clear the screen and add the header
            menuBuffer.append(Ansi.CLEAR)
                      .append("Use 'u' to navigate up, 'd' to navigate down, and Enter to select an option. Press 'q' to exit.\n\n")
                      .append(Ansi.HIGHLIGHT).append("    Registration Menu    ").append(Ansi.RESET).append("\n\n");
        
            // Append each field to the menu with fixed spacing
            appendMenuEntry(menuBuffer,"Username", username.toString(), index == 0);
            appendMenuEntry(menuBuffer,"Password", maskInput(password), index == 1);
            appendMenuEntry(menuBuffer,"Confirm", maskInput(confirmPassword), index == 2);
            appendMenuEntry(menuBuffer,"REGISTER", "", index == 3, true); // Register option without user input
            appendMenuEntry(menuBuffer,"BACK TO MAIN MENU", "", index == 4, true); // Register option without user input

            // Append the message
            menuBuffer.append("\n"+message);
            message = ""; // Reset the message
            // Write the complete buffer and reset
            writer.print(menuBuffer.toString());
            menuBuffer.setLength(0);
            terminal.flush();
        }
    
    }

    public static class Login implements Runnable {
        private final Terminal terminal;
        private final BindingReader reader;
        private final PrintWriter writer;
        private final StringBuilder username;
        private final StringBuilder password;
        private final StringBuilder menuBuffer;
        private boolean returnToMenu;
        private int index;
        private String message;

        public Login() {
            username = new StringBuilder();
            password = new StringBuilder();
            menuBuffer = new StringBuilder();
            CliHandler.getInstance();
            terminal = OptionHandler.terminal;
            reader = CliHandler.bindingReader;
            writer = OptionHandler.writer;
            returnToMenu = false;
            message = "";
            index = 0;
        }

        @Override
        public void run() {
            while (!returnToMenu) {
                displayRegisterMenu();
                String key = reader.readBinding(keyMap);
                if (key == null) continue;
                switch (key) {
                    case "UP": index = (index - 1 + 4) % 4; break;
                    case "DOWN": case "TAB": index = (index + 1) % 4; break;
                    case "ENTER":
                        if (index == 2) {
                            if(username.length() == 0 || password.length() == 0) {
                                message = Ansi.RED + "Please fill in all fields" + Ansi.RESET; break;
                            }

                            APIResponse response = null;
                            try{
                                response = EntryPoint.UserLogin(username.toString(), password.toString());
                            } catch(Exception e){
                                e.printStackTrace(writer);
                                writer.flush();
                                CliHandler.TerminationMessage = Ansi.RED+"Error on login: " + getStackTraceAsString(e)+Ansi.RESET;
                                System.exit(-1);
                            }

                            if(response.getStatus() == Status.OK){
                                CliHandler.LastOpMessage = Ansi.GREEN+"Login successful!"+Ansi.RESET;
                                CliHandler.OptionSet = Option.logged();
                                CliHandler.index = 0;
                            }
                            else
                                CliHandler.LastOpMessage = Ansi.RED+"Login failed " + response.getMessage()+Ansi.RESET;
                
                            returnToMenu = true;
                        } else if(index == 3){
                            returnToMenu = true;
                        }
                        break;

                    case "BACKSPACE":{
                        switch (index) {
                            case 0: deleteLastCharacter(username);break;
                            case 1:deleteLastCharacter(password);break;
                        }
                    } break;
                    default:
                        if (key.length() == 1) {
                            switch (index) {
                                case 0:username.append(key);break;
                                case 1:password.append(key);break;
                            }
                        }
                    break;
                }
            }
        }

        private void displayRegisterMenu() {
            // Clear the screen and add the header
            menuBuffer.append(Ansi.CLEAR)
                      .append("Use 'u' to navigate up, 'd' to navigate down, and Enter to select an option. Press 'q' to exit.\n\n")
                      .append(Ansi.HIGHLIGHT).append("\tLogin Menu\t").append(Ansi.RESET).append("\n\n");
        
            // Append each field to the menu with fixed spacing
            appendMenuEntry(menuBuffer,"Username", username.toString(), index == 0);
            appendMenuEntry(menuBuffer,"Password", maskInput(password), index == 1);
            appendMenuEntry(menuBuffer,"LOGIN", "", index == 2, true);
            appendMenuEntry(menuBuffer,"BACK TO MAIN MENU", "", index == 3, true);

            // Append the message
            menuBuffer.append("\n"+message);
            message = ""; // Reset the message
            // Write the complete buffer and reset
            writer.print(menuBuffer.toString());
            menuBuffer.setLength(0);
            terminal.flush();
        }
    
    }

    public static class FullLogout implements Runnable {
        private final Terminal terminal;
        private final BindingReader reader;
        private final PrintWriter writer;
        private final StringBuilder username;
        private final StringBuilder password;
        private final StringBuilder menuBuffer;
        private boolean returnToMenu;
        private int index;
        private String message;

        public FullLogout() {
            username = new StringBuilder();
            password = new StringBuilder();
            menuBuffer = new StringBuilder();
            CliHandler.getInstance();
            terminal = OptionHandler.terminal;
            reader = CliHandler.bindingReader;
            writer = OptionHandler.writer;
            returnToMenu = false;
            message = "";
            index = 0;
        }

        @Override
        public void run() {
            while (!returnToMenu) {
                displayFullLogoutMenu();
                String key = reader.readBinding(keyMap);
                if (key == null) continue;
                switch (key) {
                    
                    case "UP": index = (index - 1 + 4) % 4; break;
                    case "DOWN": case "TAB": index = (index +1 + 4) % 4; break;
                    case "ENTER":
                        if (index == 2) {
                            if(username.length() == 0 || password.length() == 0) {
                                message = Ansi.RED + "Please fill in all fields" + Ansi.RESET; break;
                            }

                            APIResponse response = null;
                            try{
                                response = EntryPoint.LogoutEverywhere(username.toString(), password.toString());
                            } catch(Exception e){
                                e.printStackTrace(writer);
                                writer.flush();
                                CliHandler.TerminationMessage = Ansi.RED+"Error on Full Logout: " + getStackTraceAsString(e)+Ansi.RESET;
                                System.exit(-1);
                            }

                            if(response.getStatus() == Status.OK){
                                CliHandler.LastOpMessage = Ansi.GREEN+"Logout from all devices successful!"+Ansi.RESET;
                            }
                            else
                                CliHandler.LastOpMessage = Ansi.RED+"Full Logout: " + response.getMessage()+Ansi.RESET;
                
                            returnToMenu = true;
                        } else if(index == 3){
                            returnToMenu = true;
                        }
                        break;

                    case "BACKSPACE":{
                        switch (index) {
                            case 0: deleteLastCharacter(username);break;
                            case 1:deleteLastCharacter(password);break;
                        }
                    } break;
                    default:
                        if (key.length() == 1) {
                            switch (index) {
                                case 0:username.append(key);break;
                                case 1:password.append(key);break;
                            }
                        }
                    break;
                }
            }
        }

        private void displayFullLogoutMenu() {
            // Clear the screen and add the header
            menuBuffer.append(Ansi.CLEAR)
                      .append("Use 'u' to navigate up, 'd' to navigate down, and Enter to select an option. Press 'q' to exit.\n\n")
                      .append(Ansi.HIGHLIGHT).append("\tFull Logout Menu\t").append(Ansi.RESET).append("\n\n");
        
            // Append each field to the menu with fixed spacing
            appendMenuEntry(menuBuffer,"Username", username.toString(), index == 0);
            appendMenuEntry(menuBuffer,"Password", maskInput(password), index == 1);
            appendMenuEntry(menuBuffer,"FULL LOGOUT", "", index == 2, true);
            appendMenuEntry(menuBuffer,"BACK TO MAIN MENU", "", index == 3, true);
            // Append the message
            menuBuffer.append("\n"+message);
            message = ""; // Reset the message
            // Write the complete buffer and reset
            writer.print(menuBuffer.toString());
            menuBuffer.setLength(0);
            terminal.flush();
        }
    
    }

    public static class SearchHotel implements Runnable {
        private final Terminal terminal;
        private final BindingReader reader;
        private final PrintWriter writer;
        private final StringBuilder city;
        private final StringBuilder hotel;
        private final StringBuilder menuBuffer;
        private final StringBuilder resultBuffer;
        private boolean returnToMenu;
        private boolean showResult;
        private int index;
        private String message;
        private HotelDTO result;

        public SearchHotel() {
            city = new StringBuilder();
            hotel = new StringBuilder();
            menuBuffer = new StringBuilder();
            resultBuffer = new StringBuilder();
            CliHandler.getInstance();
            terminal = OptionHandler.terminal;
            reader = CliHandler.bindingReader;
            writer = OptionHandler.writer;
            returnToMenu = false;
            showResult = false;
            
            message = "";
            index = 0;
            result = null;
        }

        @Override
        public void run() {
            displaySearchMenu();
            while (!showResult || !returnToMenu) {
                String key = reader.readBinding(keyMap);
                if (key == null) continue;
                switch (key) {
                    case "UP": index = (index - 1 + 4) % 4; break;
                    case "DOWN": case "TAB": index = (index + 1) % 4; break;
                    case "ENTER":
                        if(showResult){
                            return;
                        }
                        else if (index == 2) {
                            if(city.length() == 0 || hotel.length() == 0) {
                                message = Ansi.RED + "Please fill in all fields" + Ansi.RESET; break;
                            }

                            APIResponse response = null;
                            try{
                                response = EntryPoint.HotelSearch(city.toString(), hotel.toString());
                            } catch(Exception e){
                                e.printStackTrace(writer);
                                writer.flush();
                                CliHandler.TerminationMessage = Ansi.RED+"Error on HotelSearch: " + getStackTraceAsString(e)+Ansi.RESET;
                                System.exit(-1);
                            }

                            if(response.getStatus() == Status.OK){
                                message = Ansi.GREEN+"Search Successful!"+Ansi.RESET;
                                result = response.getHotel();
                                showResult = true;
                            }
                            else{
                                CliHandler.LastOpMessage = Ansi.RED+"Search failed " + response.getMessage()+Ansi.RESET;
                                returnToMenu = true;
                            }
                        } else if(index == 3){
                            return;
                        }
                        break;

                    case "BACKSPACE":{
                        switch (index) {
                            case 0: deleteLastCharacter(city);break;
                            case 1:deleteLastCharacter(hotel);break;
                        }
                    } break;
                    default:
                        if (key.length() == 1) {
                            switch (index) {
                                case 0:city.append(key);break;
                                case 1:hotel.append(key);break;
                            }
                        } else if(key.equals("SPACE")){
                            switch (index) {
                                case 0:city.append(" ");break;
                                case 1:hotel.append(" ");break;
                            }
                        }
                    break;
                }

                //print del menu
                if(showResult){
                    displayHotel();
                }
                else displaySearchMenu();


            }
        }

        private void displaySearchMenu() {
            // Clear the screen and add the header
            menuBuffer.append(Ansi.CLEAR)
                      .append("Use 'u' to navigate up, 'd' to navigate down, and Enter to select an option. Press 'q' to exit.\n\n")
                      .append(Ansi.HIGHLIGHT).append("\tLogin Menu\t").append(Ansi.RESET).append("\n\n");
        
            // Append each field to the menu with fixed spacing
            appendMenuEntry(menuBuffer,"Città", city.toString(), index == 0);
            appendMenuEntry(menuBuffer,"Hotel", hotel.toString(), index == 1);
            appendMenuEntry(menuBuffer,"SEARCH", "", index == 2, true);
            appendMenuEntry(menuBuffer,"BACK TO MAIN MENU", "", index == 3, true);

            // Append the message
            menuBuffer.append("\n"+message);
            message = ""; // Reset the message
            // Write the complete buffer and reset
            writer.print(menuBuffer.toString());
            menuBuffer.setLength(0);
            terminal.flush();
        }

        private void displayHotel(){
            resultBuffer.append(Ansi.CLEAR)
                        .append("Press ESC to return to main menu\n\n")
                        .append(result.toString());
            writer.print(resultBuffer.toString());
            resultBuffer.setLength(0);
            terminal.flush();
        }
    
    }

    
}
